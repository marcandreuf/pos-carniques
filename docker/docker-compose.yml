name: pos-carniques-env

services:

  postgres:
    image: postgres
    restart: always
      # set shared memory limit when using docker-compose
    shm_size: 128mb
    env_file:
      - ../backend/.env
      # or set shared memory limit when deploy via swarm stack
      #volumes:
      #  - type: tmpfs
      #    target: /dev/shm
      #    tmpfs:
      #      size: 134217728 # 128*2^20 bytes = 128Mb
    environment:
      POSTGRES_PASSWORD: 'e1x2m3p4l5!'
      POSTGRES_USER: 'postgres'
      POSTGRES_DB: 'posdb'
    user: postgres
    ports:
      - 5432:5432
    volumes:
      - pos-carniques-postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]  # Command to check if PostgreSQL is ready
      interval: 10s                                   # Time between health checks
      timeout: 5s                                    # Time to wait for the check to succeed
      retries: 5                                     # Number of retries before marking as unhealthy
      start_period: 30s                              # Initial wait time before starting health checks

  adminer:
    image: adminer
    restart: always
    ports:
      - 8081:8080
    depends_on:
      postgres:
        condition: service_healthy

  backend_dev_server:
    env_file:
      - ../backend/.env
    build:
      context: .
      dockerfile: dockerfile-dev-server
    image: pos-carniques-backend-dev-server-img
    container_name: pos-carniques-dev-server-container
    volumes:
      - ../backend:/workspace
      - ${HOME}/.local/share/pnpm:/home/node/.local/share/pnpm:cached
    ports:
      - '3000:3000'
    environment:
      - POSTGRESS_DB_HOST=http://postgres:${DB_PORT}
    # TODO. Find a health check test that works.
    # healthcheck:
    #   test: [ "CMD-SHELL", "curl -f -I https://127.0.0.1:3000 && echo 'Backend service is healthy.' || exit 1" ]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 20s
    depends_on:
      postgres:
        condition: service_healthy

  web:
    env_file:
      - ../frontend/.env
    build:
      context: .
      dockerfile: dockerfile-web
    image: pos-carniques-webapp-img
    container_name: pos-carniques-web-container
    user: node
    ports:
      - '5173:5173'
      - '4173:4173'
      - '80:80'
      - '8080:8080'
    environment:
      - VITE_APP_BASE_API=http://backend_dev_server:3000
    volumes:
      - ../frontend:/workspace
      - ${HOME}/.local/share/pnpm:/home/node/.local/share/pnpm:cached
    #For debugging I just start the container and shell into it to run the npm run dev and other dev commands.
    command: /bin/sh -c "echo 'web service up' && while sleep 1000; do :; done"
    depends_on:
      postgres:
        condition: service_healthy

volumes:
  pos-carniques-postgres-data:
    driver: local